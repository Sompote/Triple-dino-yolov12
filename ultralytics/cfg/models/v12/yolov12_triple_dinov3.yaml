# YOLOv12 ðŸš€, AGPL-3.0 license
# YOLOv12 Triple Input with DINOv3 Backbone object detection model with P3-P5 outputs
# CFG file for YOLOv12-triple with DINOv3 feature extraction and 9-channel input support

# Parameters
nc: 80 # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov12n_triple_dinov3.yaml' will call yolov12_triple_dinov3.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.50, 0.25, 1024] # summary: ~XXX layers, ~X,XXX,XXX parameters, ~X,XXX,XXX gradients, ~XX.X GFLOPs
  s: [0.50, 0.50, 1024] # summary: ~XXX layers, ~X,XXX,XXX parameters, ~X,XXX,XXX gradients, ~XX.X GFLOPs
  m: [0.50, 1.00, 512]  # summary: ~XXX layers, ~XX,XXX,XXX parameters, ~XX,XXX,XXX gradients, ~XXX.X GFLOPs
  l: [1.00, 1.00, 512]  # summary: ~XXX layers, ~XX,XXX,XXX parameters, ~XX,XXX,XXX gradients, ~XXX.X GFLOPs
  x: [1.00, 1.50, 512]  # summary: ~XXX layers, ~XX,XXX,XXX parameters, ~XX,XXX,XXX gradients, ~XXX.X GFLOPs

# DINOv3 configuration
dinov3:
  model_size: "small"        # DINOv3 model size: small, base, large, giant
  freeze: true               # Freeze DINOv3 backbone during training
  use_triple_branches: false # Use separate DINOv3 branches for each input
  output_channels: 64        # Output channels from DINOv3 backbone
  image_size: 224           # Input image size for DINOv3

# YOLO12-triple backbone with DINOv3 feature extraction
backbone:
  # [from, repeats, module, args]
  
  # DINOv3 Feature Extraction (before P0)
  - [-1, 1, DINOv3Backbone, [dinov3]]  # 0-DINOv3 feature extraction
  
  # YOLOv12 Backbone starting from DINOv3 features
  - [-1, 1, TripleInputConv, [64, 3, 2]] # 1-P1/2 - Triple input layer for 9-channel input
  - [-1, 1, Conv,  [128, 3, 2, 1, 2]]   # 2-P2/4
  - [-1, 2, C3k2,  [256, False, 0.25]]  # 3
  - [-1, 1, Conv,  [256, 3, 2, 1, 4]]   # 4-P3/8
  - [-1, 2, C3k2,  [512, False, 0.25]]  # 5
  - [-1, 1, Conv,  [512, 3, 2]]         # 6-P4/16
  - [-1, 4, A2C2f, [512, True, 4]]      # 7
  - [-1, 1, Conv,  [1024, 3, 2]]        # 8-P5/32
  - [-1, 4, A2C2f, [1024, True, 1]]     # 9

# YOLO12-triple head (same as standard YOLOv12)
head:
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]  # 10
  - [[-1, 7], 1, Concat, [1]] # cat backbone P4        # 11
  - [-1, 2, A2C2f, [512, False, -1]]                   # 12

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]  # 13
  - [[-1, 5], 1, Concat, [1]] # cat backbone P3        # 14
  - [-1, 2, A2C2f, [256, False, -1]]                   # 15

  - [-1, 1, Conv, [256, 3, 2]]                         # 16
  - [[-1, 12], 1, Concat, [1]] # cat head P4           # 17
  - [-1, 2, A2C2f, [512, False, -1]]                   # 18

  - [-1, 1, Conv, [512, 3, 2]]                         # 19
  - [[-1, 9], 1, Concat, [1]] # cat head P5            # 20
  - [-1, 2, C3k2, [1024, True]]                        # 21 (P5/32-large)

  - [[15, 18, 21], 1, Detect, [nc]]                    # Detect(P3, P4, P5)